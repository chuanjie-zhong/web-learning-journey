//前端是无法直接读取文件  操作文件  (node是使用在服务端的)
// 对文件和前端传递的数据进行处理
// 进制数据  所有内容都是以2进制来存储的，数据都是以二进制形式来表现得

//  二进制  十进制的区别  十进制最大的是九  二进制最大的是一
// 我们以字节为单位来存储数据 8位 =>1字节 1024个字节 => 1k  1024k =>1m

// 其他进制如何转换为十进制  当前位数 * 进制^当前所在位  把每一位相加


// 每个字节最大是255  16进制 8进制

// 将一个十进制转化为二进制  取余倒着读即可

console.log(parseInt('101',2))//把任意机制转换为10进制

// ob 二进制  ox 十六进制
// console.log((Ox64).toString(2))//将任何进制转换为十进制

// 小数也要转换成二进制

// 十进制中的0.5 是二进制中的多少==> 10=> 0.5 <==>2 => 0.1
// 乘二取整法就可以将一个小数转换为二进制数

// 0.1 * 2 = 0.2  0 
// 0.2 * 2 = 0.4  0 
// 0.4 * 2 = 0.8  0 
// 0.8 * 2 = 1.6  1 
// 1.6 * 2 = 1.2  1

console.log(0.1+0.2)  //如果出现精度问题应该如何解决？
// js是没有把小数转换成二进制方法

// 在服务端，我们需要一个东西可以来标识内存，但是不能是字符串，因为字符串无法标识图片
// node中用buffer来标识内存的数据，他把内容转换成了16进制来显示 (16进制比较短)

// 十进制=> 255  11111111=>二进制   Oxff=> 16进制   buffer每个字节的取值范围是 0---Oxff

// node中buffer可以和字符串任意的转换 (可能会出现乱码)

// 编码规范 ASCII(美国人) => GB18030/GBK => unicode => UTF8
// 单字节(因为字母，符号都是一个字节)
// UTF8 中汉字是由三个字节组成


// 统一使用UTF8  node不支持gbk，只支持utf8
// buffer代表的是内存，内存是固定空间  产生的内存是固定大小，不能随意添加
// 扩容的概念，需要动态的创建新的内容，被内容迁移过去
const buffer1 = Buffer.alloc(5);
console.log(buffer1);//像数组(但是和数组有区别)，数组可以扩展，buffer不能扩展，可以用索引值

// 此方法用的少，我们不会填16进制
const buffer2 = Buffer.from([0x25,0x26,0x64])
console.log(buffer2)

const buffer3 = Buffer.from("钟传杰")
console.log(buffer3)

// 一般情况下，我们会alloc来声明一个buffer，或者把字符串转化成buffer使用
// 后台获取的数据都是buffer，包括后面的文件操作都是buffer形式

